services:
  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: mission-sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong@Passw0rd
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mission-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -Q 'SELECT 1' || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  # Backend API
  backend:
    build:
      context: ./gestionMissionBack
      dockerfile: Dockerfile
    container_name: mission-backend
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=MissionDatabaseTest3;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true;MultipleActiveResultSets=true
      - ASPNETCORE_URLS=http://+:80
    ports:
      - "5000:80"
    depends_on:
      - sqlserver
    networks:
      - mission-network
    volumes:
      - ./gestionMissionBack/gestionMissionBack.Api/wwwroot/uploads:/app/wwwroot/uploads
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./gestionMissionFront
      dockerfile: Dockerfile
    container_name: mission-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - mission-network
    restart: unless-stopped

volumes:
  sqlserver_data:
    driver: local

networks:
  mission-network:
    driver: bridge 