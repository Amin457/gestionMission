// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using gestionMissionBack.Domain.Entities;
using gestionMissionBack.Domain.Enums;
using Microsoft.EntityFrameworkCore;
using TaskMission = gestionMissionBack.Domain.Entities.TaskMission;

namespace gestionMissionBack.Infrastructure.Persistence;

public partial class MissionFleetContext : DbContext
{
    public MissionFleetContext(DbContextOptions<MissionFleetContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Article> Articles { get; set; }

    public virtual DbSet<Circuit> Circuits { get; set; }

    public virtual DbSet<Document> Documents { get; set; }

    public virtual DbSet<Incident> Incidents { get; set; }

    public virtual DbSet<Mission> Missions { get; set; }

    public virtual DbSet<MissionCost> MissionCosts { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<Route> Routes { get; set; }

    public virtual DbSet<TaskMission> Tasks { get; set; }

    public virtual DbSet<City> Cities { get; set; }

    public virtual DbSet<Site> Sites { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Vehicle> Vehicles { get; set; }

    public virtual DbSet<VehicleReservation> VehicleReservations { get; set; }

    public virtual DbSet<UserConnection> UserConnections { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Article>(entity =>
        {
            entity.HasKey(e => e.ArticleId).HasName("PK__Article__9C6270C8AD0F3EFB");

            entity.ToTable("Article");

            entity.Property(e => e.ArticleId).HasColumnName("ArticleID");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PhotoUrls)
                .HasMaxLength(2000); // JSON string to store photo URLs
        });

        modelBuilder.Entity<Circuit>(entity =>
        {
            entity.HasKey(e => e.CircuitId).HasName("PK__Circuit__7D21697020F37C3D");

            entity.ToTable("Circuit");

            entity.Property(e => e.CircuitId).HasColumnName("CircuitID");
            entity.Property(e => e.MissionId).HasColumnName("MissionID");
            entity.Property(e => e.DepartureSiteId).HasColumnName("DepartureSiteID");
            entity.Property(e => e.ArrivalSiteId).HasColumnName("ArrivalSiteID");

            entity.HasOne(d => d.Mission)
                .WithMany(p => p.Circuits)
                .HasForeignKey(d => d.MissionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Circuit__Mission__5535A963");

            entity.HasOne(d => d.DepartureSite)
                .WithMany()
                .HasForeignKey(d => d.DepartureSiteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Circuit_DepartureSite");

            entity.HasOne(d => d.ArrivalSite)
                .WithMany()
                .HasForeignKey(d => d.ArrivalSiteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Circuit_ArrivalSite");
        });

        modelBuilder.Entity<Document>(entity =>
        {
            entity.HasKey(e => e.DocumentId).HasName("PK__Document__1ABEEF6F3F9BB20D");

            entity.ToTable("Document");

            entity.Property(e => e.DocumentId).HasColumnName("DocumentID");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.StoragePath)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.TaskId).HasColumnName("TaskID");
            entity.Property(e => e.Type)
                .HasConversion<string>()
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Task).WithMany(p => p.Documents)
                .HasForeignKey(d => d.TaskId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__Document__TaskID__619B8048");
        });

        modelBuilder.Entity<Incident>(entity =>
        {
            entity.HasKey(e => e.IncidentId).HasName("PK__Incident__3D80539215473664");

            entity.ToTable("Incident");

            entity.Property(e => e.IncidentId).HasColumnName("IncidentID");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.MissionId).HasColumnName("MissionID");
            entity.Property(e => e.Status)
                .HasConversion<string>()
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Type)
                .HasConversion<string>()
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.IncidentDocsUrls)
                .HasMaxLength(2000); // JSON string to store document/image URLs

            entity.HasOne(d => d.Mission).WithMany(p => p.Incidents)
                .HasForeignKey(d => d.MissionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Incident__Missio__4E88ABD4");
        });

        modelBuilder.Entity<Mission>(entity =>
        {
            entity.HasKey(e => e.MissionId).HasName("PK__Mission__66DFB854D8A8E8BD");

            entity.ToTable("Mission");

            entity.Property(e => e.MissionId).HasColumnName("MissionID");

            entity.Property(e => e.DriverId).HasColumnName("DriverID");
            entity.Property(e => e.RequesterId).HasColumnName("RequesterID");
            //entity.Property(e => e.SourceId).HasColumnName("SourceID");
            //entity.Property(e => e.DestinationId).HasColumnName("DestinationID");

            entity.Property(e => e.Service)
                .IsRequired()
                .HasMaxLength(255);

            entity.Property(e => e.Receiver)
                .IsRequired()
                .HasMaxLength(255);

            entity.Property(e => e.Type)
                .HasConversion<string>() // stocké en tant que texte
                .HasMaxLength(50)
                .IsRequired();

            entity.Property(e => e.Status)
                .HasConversion<string>()
                .HasMaxLength(50)
                .IsRequired();

            // Relations

            entity.HasOne(d => d.Driver)
                .WithMany(p => p.MissionDrivers)
                .HasForeignKey(d => d.DriverId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Mission__DriverID");

            entity.HasOne(d => d.Requester)
                .WithMany(p => p.MissionRequesters)
                .HasForeignKey(d => d.RequesterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Mission__RequesterID");

            //entity.HasOne(d => d.Source)
            //    .WithMany()
            //    .HasForeignKey(d => d.SourceId)
            //    .OnDelete(DeleteBehavior.Restrict)
            //    .HasConstraintName("FK_Mission_Source");

            //entity.HasOne(d => d.Destination)
            //    .WithMany()
            //    .HasForeignKey(d => d.DestinationId)
            //    .OnDelete(DeleteBehavior.Restrict)
            //    .HasConstraintName("FK_Mission_Destination");
        });

        modelBuilder.Entity<MissionCost>(entity =>
        {
            entity.HasKey(e => e.CostId).HasName("PK__MissionC__8285231E0764B8E9");

            entity.ToTable("MissionCost");

            entity.Property(e => e.CostId).HasColumnName("CostID");
            entity.Property(e => e.MissionId).HasColumnName("MissionID");
            entity.Property(e => e.Type)
                .HasConversion<string>()
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Amount).IsRequired();
            entity.Property(e => e.Date).IsRequired();
            entity.Property(e => e.ReceiptPhotoUrls)
                .HasMaxLength(2000); // JSON string to store photo URLs

            entity.HasOne(d => d.Mission).WithMany(p => p.MissionCosts)
                .HasForeignKey(d => d.MissionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__MissionCo__Missi__52593CB8");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.NotificationId).HasName("PK__Notifica__20CF2E3219D351A6");

            entity.ToTable("Notification");

            entity.Property(e => e.NotificationId).HasColumnName("NotificationID");
            entity.Property(e => e.Message).IsRequired();
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UserId).HasColumnName("UserID");

            // New fields configuration
            entity.Property(e => e.NotificationType)
                .HasConversion<string>()
                .HasMaxLength(50)
                .IsRequired();

            entity.Property(e => e.Priority)
                .HasConversion<string>()
                .HasMaxLength(20)
                .IsRequired();

            entity.Property(e => e.Status)
                .HasConversion<string>()
                .HasMaxLength(20)
                .IsRequired();

            entity.Property(e => e.RelatedEntityType)
                .HasMaxLength(50);

            entity.Property(e => e.RelatedEntityId);

            entity.Property(e => e.ExpiryDate);

            entity.HasOne(d => d.User).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Notificat__UserI__49C3F6B7");
        });

        modelBuilder.Entity<Route>(entity =>
        {
            entity.HasKey(e => e.RouteId).HasName("PK__Route__80979AAD76DC2E82");

            entity.ToTable("Route");

            entity.Property(e => e.RouteId).HasColumnName("RouteID");
            entity.Property(e => e.CircuitId).HasColumnName("CircuitID");
            entity.Property(e => e.DepartureSiteId).HasColumnName("DepartureSiteID");
            entity.Property(e => e.ArrivalSiteId).HasColumnName("ArrivalSiteID");
            entity.Property(e => e.DistanceKm).HasColumnName("DistanceKM");
            entity.Property(e => e.Ordre).HasColumnName("Ordre");

            entity.HasOne(d => d.Circuit)
                .WithMany(p => p.Routes)
                .HasForeignKey(d => d.CircuitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Route__CircuitID__5812160E");

            entity.HasOne(d => d.DepartureSite)
                .WithMany()
                .HasForeignKey(d => d.DepartureSiteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Route_DepartureSite");

            entity.HasOne(d => d.ArrivalSite)
                .WithMany()
                .HasForeignKey(d => d.ArrivalSiteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Route_ArrivalSite");
        });

        modelBuilder.Entity<TaskMission>(entity =>
        {
            entity.HasKey(e => e.TaskId).HasName("PK__Task__7C6949D18E3FD33F");

            entity.ToTable("Task");

            entity.Property(e => e.TaskId).HasColumnName("TaskID");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.AssignmentDate).IsRequired();
            entity.Property(e => e.CompletionDate);
            entity.Property(e => e.Status)
                .HasConversion<string>() // stocké en tant que texte
                .HasMaxLength(50)
                .IsRequired();
            entity.Property(e => e.MissionId).HasColumnName("MissionID");
            entity.Property(e => e.SiteId).HasColumnName("SiteID");
            entity.Property(e => e.IsFirstTask)
                .HasDefaultValue(false)
                .IsRequired();

            entity.HasOne(d => d.Mission)
                .WithMany(p => p.Tasks)
                .HasForeignKey(d => d.MissionId)
                .HasConstraintName("FK__Task__MissionID__787EE5A0");

            entity.HasOne(d => d.Site)
                .WithMany(p => p.Tasks)
                .HasForeignKey(d => d.SiteId)
                .HasConstraintName("FK_Task_Site");

            entity.HasMany(t => t.Articles)
            .WithMany(a => a.Tasks)
            .UsingEntity(j => j.ToTable("TaskArticle"));
        });

        modelBuilder.Entity<Site>(entity =>
        {
            entity.HasKey(e => e.SiteId);
            entity.ToTable("Site");

            entity.Property(e => e.SiteId).HasColumnName("SiteID");
            entity.Property(e => e.Name).IsRequired().HasMaxLength(100);
            entity.Property(e => e.Type).IsRequired().HasMaxLength(50);
            entity.Property(e => e.Address).HasMaxLength(200);
            entity.Property(e => e.Phone).HasMaxLength(20);
            entity.Property(e => e.CityId).HasColumnName("CityID");
            entity.Property(e => e.Latitude).HasPrecision(10, 6);
            entity.Property(e => e.Longitude).HasPrecision(10, 6);

            entity.HasOne(s => s.City)
                .WithMany(c => c.Sites)
                .HasForeignKey(s => s.CityId)
                .HasConstraintName("FK_Site_City");
        });


        modelBuilder.Entity<City>(entity =>
        {
            entity.HasKey(e => e.CityId);
            entity.ToTable("City");

            entity.Property(e => e.CityId).HasColumnName("CityID");
            entity.Property(e => e.Name).IsRequired().HasMaxLength(100);
            entity.Property(e => e.Region).HasMaxLength(100);
            entity.Property(e => e.PostalCode).HasMaxLength(10);
        });


        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__User__1788CCACD0A71248");

            entity.ToTable("User");

            entity.HasIndex(e => e.Email, "UQ__User__A9D10534D7BE49D1").IsUnique();

            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(255);

            entity.Property(e => e.CurrentDriverStatus)
                .HasConversion<string>()
                .HasMaxLength(50);

            entity.Property(e => e.Phone).HasMaxLength(20);

            entity.Property(e => e.RoleId).IsRequired();

            entity.HasOne(d => d.Role)
                .WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.Restrict);
        });


        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId);
            entity.ToTable("Role");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50); 

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50);  

            entity.Property(e => e.Libelle)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasIndex(e => e.Name)
                .IsUnique();

            entity.HasData(
                new Role { RoleId = 1, Name = "Admin",  Libelle = "" , Code = "ADMN"},
                new Role { RoleId = 2, Name = "Driver",  Libelle = "Driver", Code = "DRVR" }
            );
        });


        modelBuilder.Entity<Vehicle>(entity =>
        {
            entity.HasKey(e => e.VehicleId).HasName("PK__Vehicle__476B54B22EA98523");

            entity.ToTable("Vehicle");

            entity.HasIndex(e => e.LicensePlate, "UQ__Vehicle__026BC15C17EB5336").IsUnique();

            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
            entity.Property(e => e.Availability).HasDefaultValue(true);
            entity.Property(e => e.LicensePlate)
                .IsRequired()
                .HasMaxLength(50);

            entity.Property(e => e.Type)
             .HasConversion<string>()
             .HasMaxLength(50);

            entity.Property(e => e.PhotoUrls)
                .HasMaxLength(2000); // JSON string to store photo URLs
        });

        modelBuilder.Entity<VehicleReservation>(entity =>
        {
            entity.HasKey(e => e.ReservationId).HasName("PK__VehicleR__B7EE5F04DE7C200E");

            entity.ToTable("VehicleReservation");

            entity.Property(e => e.ReservationId).HasColumnName("ReservationID");
            entity.Property(e => e.Departure)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Destination)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.RequesterId).HasColumnName("RequesterID");
            entity.Property(e => e.Status)
                .HasConversion<string>()
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");

            entity.HasOne(d => d.Requester).WithMany(p => p.VehicleReservations)
                .HasForeignKey(d => d.RequesterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__VehicleRe__Reque__403A8C7D");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.VehicleReservations)
                .HasForeignKey(d => d.VehicleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__VehicleRe__Vehic__412EB0B6");
        });

        modelBuilder.Entity<UserConnection>(entity =>
        {
            entity.HasKey(e => e.ConnectionId);

            entity.ToTable("UserConnection");

            entity.Property(e => e.ConnectionId)
                .HasMaxLength(100)
                .IsRequired();

            entity.Property(e => e.UserId)
                .IsRequired();

            entity.Property(e => e.ConnectedAt)
                .IsRequired()
                .HasDefaultValueSql("GETDATE()");

            entity.Property(e => e.LastActivity)
                .IsRequired()
                .HasDefaultValueSql("GETDATE()");

            entity.HasOne(d => d.User)
                .WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_UserConnection_User");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}